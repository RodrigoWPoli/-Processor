opcode:  operação:
0000     nop done
0001     add done
0010     addi done
0011     sub done
0100     subi done
0101     cmpi
0110     ld done
0111     lda done
1000     OR
1001     mult
1010     mov
1011     mova
1100     jmp (jump absoluto)

nop:
0000_0000_0000_0000

add:
A <- A + RS
add rs -> R0 a R7
seleciona o registrador para ler, src da ula para registradores, aciona A para escrita, operação de soma na ULA, 
opcode_rs(RBOutSel)_AluOp_nop
0001_XXX_0000000
0001111000000000 -> add R7 

addi: 
A <- A + cte
aciona A para escrita, operação de soma na ULA, seleciona o src da ula para cte
addi cte
opcode_cte
0010_000000000000
0010100100011010 -> addi 2330

ld: 
RD <- cte
ld rs cte
opcode_rs(RBInSel)_cte
0110_XXX_000000000
0110111000101101 -> ld R7 45

lda: 
A <- cte
lda cte
opcode_loadASrc_cte
0111_0_0000000000
0111010001010011

sub:
A <- A + RS
sub rs -> R0 a R7
seleciona o registrador para ler, src da ula para registradores, aciona A para escrita, operação de subtração na ULA, 
opcode_rs(RBOutSel)_AluOp_nop
0011_XXX_0000000
0011111000000000 -> sub R7 

subi: 
A <- A + cte
aciona A para escrita, operação de sub na ULA, seleciona o src da ula para cte
subi cte
opcode_cte
0100_000000000000
0100000000110111 -subi 55

mov:
RD <- A
seleciona o registrador para escrita, seleciona o dado vindo do acumulador ou de um reg
mov RD RS
AorRB-> A:0, RB:1
opcode_AorRB_RBOutSel_RBInSel
1010_A_XXX_XXX_00000
1010111100100000 -> MOV R1 R7
1010011110100000 -> MOV R5 A (111 do meio não importa para o A)


Fios:
A_wr_en -> escrita no acumulador
add, addi, sub, subi, lda, OR, mult, mova
rb_wr_en -> escrita nos registradores
mov, ld, 
rb_out_sel -> qual registrador ler
add, sub, OR, mult,
rb_in_sel -> qual registrador escrever
mov, ld,
aluSrc -> qual input da ula (cte ou rb)
add, addi, sub, subi, OR, mult, cmpi
loadSrc -> qual dado escrever no rb
mov, ld
loadASrc -> qual dado escrever no acumulador
add, addi, sub, subi, lda, OR, mult, mova
imm -> constante
addi, subi, ld, lda
jump_en -> ativar jump
jmp
jump_addr -> qual endereço pro jump